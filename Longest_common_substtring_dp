// https://leetcode.com/problems/longest-common-subsequence/

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        if(text1.length() > text2.length()) {
            String temp = text1;
            text1 = text2;
            text2 = temp;
        }
        
        int m = text1.length();
        int n = text2.length();
        // We are interested only in the column calculated just before
        // (column to the right in the grid)
        int previous[] = new int[m + 1];
        int current[] = new int[m+ 1];
        
        for(int i = n - 1; i >= 0; i--) {
            for(int j = m - 1; j >= 0; j--) {
                // If both the strings have same char, 
                // the sub problem is just exclude that char (1 + diagonally down in the grid)
                if(text1.charAt(j) == text2.charAt(i)) {
                    current[j] =  1 + previous[j + 1];
                } else {
                    // Otherwise, one subproblem is to exclude current char in text1 
                    // and the other is to exclude current chat in text2
                    // (maximum of immediate below and immediate right)
                    current[j] = Math.max(previous[j], current[j + 1]);
                }
            }
            int[] temp = current;
            // temp = current;
            current = previous;
            previous = temp;
        }
        return previous[0];
    }  
}
